#!/bin/bash

# 0-additional-models
# Script to add additional model deployments to the azd infrastructure template
# Usage: ./scripts/0-additional-models

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
INFRA_DIR="$REPO_ROOT/.azd-setup/infra"
CONFIG_FILE="$SCRIPT_DIR/0-additional-models.json"
MAIN_BICEP="$INFRA_DIR/main.bicep"
PARAMS_FILE="$INFRA_DIR/main.parameters.json"

echo -e '${BLUE}=== Adding Additional Model Deployments ===${NC}'

# Check if configuration file exists
if [[ ! -f "$CONFIG_FILE" ]]; then
    echo -e "${RED}Error: Configuration file not found: $CONFIG_FILE${NC}"
    echo "Please create the configuration file with your model deployment details."
    exit 1
fi

# Check if infrastructure directory exists
if [[ ! -d "$INFRA_DIR" ]]; then
    echo -e "${RED}Error: Infrastructure directory not found: $INFRA_DIR${NC}"
    echo "Please run './scripts/2-setup-azd' first to set up the infrastructure template."
    exit 1
fi

# Check if required files exist
if [[ ! -f "$MAIN_BICEP" ]]; then
    echo -e "${RED}Error: main.bicep not found: $MAIN_BICEP${NC}"
    exit 1
fi

if [[ ! -f "$PARAMS_FILE" ]]; then
    echo -e "${RED}Error: main.parameters.json not found: $PARAMS_FILE${NC}"
    exit 1
fi

# Validate JSON configuration
echo -e "${YELLOW}Validating configuration file...${NC}"
if ! jq empty "$CONFIG_FILE" 2>/dev/null; then
    echo -e "${RED}Error: Invalid JSON in configuration file: $CONFIG_FILE${NC}"
    exit 1
fi

echo -e "${GREEN}✓ Configuration file is valid${NC}"

# Read additional models from config file
ADDITIONAL_MODELS=$(cat "$CONFIG_FILE")
echo -e "${BLUE}Models to add:${NC}"
echo "$ADDITIONAL_MODELS" | jq -r '.[] | "  - \(.name) (\(.model.name) \(.model.version))"'

# Backup original files
echo -e "${YELLOW}Creating backups...${NC}"
cp "$MAIN_BICEP" "$MAIN_BICEP.backup.$(date +%Y%m%d-%H%M%S)"
cp "$PARAMS_FILE" "$PARAMS_FILE.backup.$(date +%Y%m%d-%H%M%S)"
echo -e "${GREEN}✓ Backups created${NC}"

# Step 1: Add parameter to main.bicep if not already present
echo -e "${YELLOW}Step 1: Adding parameter to main.bicep...${NC}"
if grep -q "additionalModelDeployments" "$MAIN_BICEP"; then
    echo -e "${GREEN}✓ Parameter already exists in main.bicep${NC}"
else
    # Find the line after embedDeploymentCapacity parameter and add our parameter
    TEMP_FILE=$(mktemp)
    awk '
    /param embedDeploymentCapacity int = 30/ {
        print $0
        print ""
        print "@description(\"Additional model deployments to create\")"
        print "param additionalModelDeployments array = []"
        next
    }
    {print}
    ' "$MAIN_BICEP" > "$TEMP_FILE"
    mv "$TEMP_FILE" "$MAIN_BICEP"
    echo -e "${GREEN}✓ Added additionalModelDeployments parameter${NC}"
fi

# Step 2: Update aiDeployments variable in main.bicep
echo -e "${YELLOW}Step 2: Updating aiDeployments variable...${NC}"
if grep -q "additionalModelDeployments" "$MAIN_BICEP" && grep -A5 -B5 "var aiDeployments" "$MAIN_BICEP" | grep -q "additionalModelDeployments"; then
    echo -e "${GREEN}✓ aiDeployments variable already includes additionalModelDeployments${NC}"
else
    # Find and replace the aiDeployments variable
    TEMP_FILE=$(mktemp)
    awk '
    /^var aiDeployments = concat\(/ {
        print "var aiDeployments = concat("
        print "  aiChatModel,"
        print "  useSearchService ? aiEmbeddingModel : [],"
        print "  additionalModelDeployments"
        print ")"
        # Skip the original concat block
        while (getline && $0 !~ /^\)/) continue
        next
    }
    {print}
    ' "$MAIN_BICEP" > "$TEMP_FILE"
    mv "$TEMP_FILE" "$MAIN_BICEP"
    echo -e "${GREEN}✓ Updated aiDeployments variable${NC}"
fi

# Step 3: Add parameter to main.parameters.json
echo -e "${YELLOW}Step 3: Adding parameter to main.parameters.json...${NC}"
if grep -q "additionalModelDeployments" "$PARAMS_FILE"; then
    echo -e "${YELLOW}Parameter already exists in main.parameters.json, updating with new models...${NC}"
    # Update existing parameter with the models from config file
    TEMP_FILE=$(mktemp)
    jq --argjson models "$ADDITIONAL_MODELS" '.parameters.additionalModelDeployments.value = $models' "$PARAMS_FILE" > "$TEMP_FILE"
    mv "$TEMP_FILE" "$PARAMS_FILE"
    echo -e "${GREEN}✓ Updated additionalModelDeployments parameter with models${NC}"
else
    # Add the parameter with the models from config file
    TEMP_FILE=$(mktemp)
    jq --argjson models "$ADDITIONAL_MODELS" '.parameters.additionalModelDeployments = {"value": $models}' "$PARAMS_FILE" > "$TEMP_FILE"
    mv "$TEMP_FILE" "$PARAMS_FILE"
    echo -e "${GREEN}✓ Added additionalModelDeployments parameter to main.parameters.json${NC}"
fi

echo -e "${GREEN}=== Additional Model Deployments Setup Complete ===${NC}"
echo ""
echo -e "${BLUE}Next Steps:${NC}"
echo "1. Review the changes made to the infrastructure files"
echo "2. Run 'azd up' from the project root to deploy the additional models"
echo ""
echo -e "${BLUE}Models that will be deployed:${NC}"
echo "$ADDITIONAL_MODELS" | jq -r '.[] | "  • \(.name) - \(.model.name) \(.model.version) (Capacity: \(.sku.capacity))"'
echo ""
echo -e "${YELLOW}Note: Make sure your Azure subscription has sufficient quota for these models in the selected region.${NC}"